@page "/assignments/{CourseIdx:int}"

@using System.Xml.Serialization
@using System.Xml.Linq
@using BetterVue.Services

@inject IAccountService accService
@inject NavigationManager NavManager

<body>
	<div id="overview">
		<h3>@course.Attribute("Title").Value</h3>
		<button class="btn btn-primary" onclick=@Reset>Reset</button>
		<a class="btn btn-primary" id="finals" href="finals/@CourseIdx">Finals Calculator</a>
		<h3>@percent.ToString("F2")</h3>
	</div>
	<table>
		@{
			int idx = 0;
			foreach(var assignment in mark.Descendants("Assignment")) {
				bool editable = true;
				var pointsStr = assignment.Attribute("Points").Value;
				var split = pointsStr.Split(new char[]{' '}, 2);
				string cur = "", total = "";
				try {
					if (split[1] == "Points Possible") {
						cur = "?";
						total = "/ " + split[0];
					}
					else {
						cur = split[0];
						total = split[1];
					}
				}
				catch {
					cur = pointsStr;
					editable = false;
				}

				var assign = new Assignment(assignment.Attribute("Type").Value, cur, cur, total.Replace("/ ",""));
				assignments.Add(assign);
				var local = idx;
				<tr class=@(assignments[local].Points == assignments[local].OriginalPointVal ? "" : "changed")>
					<td>@assignment.Attribute("Measure").Value</td>
					<td>@assignment.Attribute("Type").Value</td>
					<td><input value=@assignments[local].Points readonly=@(!editable) @onchange=@(args => {assignments[local].Points = args.Value.ToString();CalculateCurrentPercent(); })/></td>
					<td>@total</td>
				</tr>
				idx++;
			}
		}
	</table>
</body>
@code {
	double percent = 0;


	[Parameter]
	public int CourseIdx { get; set; }

	XElement course;
	XElement mark;
	List<XElement> weights;
	protected override void OnInitialized() {
		if (accService.User is null || accService.Gradebook is null) {
			NavManager.NavigateTo("");
			return;
		}
		var courses = accService.Gradebook.Descendants("Course").ToList();
		if (CourseIdx < courses.Count) {
			course = courses[CourseIdx];
			mark = course.Descendants("Mark").Last();
			percent = double.Parse(mark.Attribute("CalculatedScoreRaw").Value);
			weights = mark.Descendants("AssignmentGradeCalc").ToList();
		}
		else {
			NavManager.NavigateTo("grades");
		}
	}

	List<Assignment> assignments = new List<Assignment>();
	void CalculateCurrentPercent () {
		Dictionary<string, double> catPoints = new();
		Dictionary<string, double> catTotals = new();

		foreach(var assignment in assignments) {
			if (double.TryParse(assignment.Points, out double points) && double.TryParse(assignment.Total, out double total)) {
				if (!catPoints.ContainsKey(assignment.Type)) {
					catPoints.Add(assignment.Type, points);
					catTotals.Add(assignment.Type, total);
				}
				else {
					catPoints[assignment.Type] += points;
					catTotals[assignment.Type] += total;
				}
			}
		}
		double sumOfWeights = 0;
		double unnormalizedGrade = 0;
		foreach(var category in weights) {
			var weight = double.Parse(category.Attribute("Weight").Value.Trim('%'));
			var catName = category.Attribute("Type").Value;
			if(catPoints.ContainsKey(catName)) {
				sumOfWeights += weight;
				unnormalizedGrade += catPoints[catName] / catTotals[catName] * weight;
			}
		}
		Console.WriteLine(catPoints);
		Console.WriteLine(catTotals);
		percent = unnormalizedGrade / sumOfWeights * 100;
	}

	void Reset() {
		for(int i = 0; i < assignments.Count; i++) {
			assignments[i].Points = assignments[i].OriginalPointVal;
		}
	}

}
